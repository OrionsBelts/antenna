---
name: CI/CD - pull_reqeust

on:
  pull_request:
    types:
      - 'opened'
      - 'reopened'
      - 'synchronize'

env:
  TF_VAR_do_create_record: true
  TF_VAR_do_domain: ${{ secrets.STAGING_DOMAIN }}
  TF_VAR_do_ipv4_float: ${{ secrets.STAGING_IPV4 }}
  TF_VAR_do_region: ${{ secrets.STAGING_REGION }}
  TF_VAR_do_registry_auth: ${{ secrets.DO_CONTAINER_REGISTRY_AUTH_TOKEN }}
  TF_VAR_do_ssh_key: ${{ secrets.STAGING_DO_SSH_KEY_NAME }}
  TF_VAR_do_subdomain: ${{ format('{0}.{1}', github.head_ref, secrets.STAGING_SUBDOMAIN) }}
  TF_VAR_do_token: ${{ secrets.DO_API_TOKEN }}
  TF_VAR_letsencrypt_email: ${{ secrets.STAGING_LETSENCRYPT_EMAIL }}
  TF_VAR_ssh_key_file: "${{ secrets.STAGING_DO_SSH_KEY_NAME }}.pub"
  TF_VAR_cloud_template: cloud-config-staging.tpl
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  secrets:
    name: Validate Secrets
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          # Installing dependecies
          pip3 install yq
          echo "::add-path::/home/runner/.local/bin"
          # Check versions; validate deps
          jq --version
          /home/runner/.local/bin/yq --version

      - name: Run secret validation
        env:
          SECRETS: ${{ toJson(secrets) }}
        working-directory: ./core
        run: scripts/validate-secrets.sh

  terraform:
    name: Validate Terraform
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Fetch Public SSH key
        env:
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
          SSH_KEY_NAME: ${{ secrets.PROD_DO_SSH_KEY_NAME }}
        working-directory: ./core
        run: scripts/fetch-sshkey.sh

      - name: Fetch Cert PEM File
        working-directory: ./core
        run: scripts/fetch-pem.sh

      - name: Initiate terraform
        working-directory: ./core
        run: terraform init

      - name: Validate terraform
        working-directory: ./core
        run: terraform validate

      - name: Generate SHA slug
        run: echo "::set-env name=COMMITISH::$(git rev-parse --short HEAD)"

      # NOTE: This command will validate variables are present/correct
      - name: Plan terraform
        working-directory: ./core
        env:
          TF_VAR_do_subdomain: ${{ format('{0}.{1}', env.COMMITISH, secrets.STAGING_SUBDOMAIN) }}
        run: terraform plan

  smoketest:
    name: Smoke Test
    runs-on: ubuntu-20.04
    needs:
      - secrets
      - terraform
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Fetch Public SSH key
        env:
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
          SSH_KEY_NAME: ${{ secrets.PROD_DO_SSH_KEY_NAME }}
        working-directory: ./core
        run: scripts/fetch-sshkey.sh

      - name: Fetch Cert PEM File
        working-directory: ./core
        run: scripts/fetch-pem.sh

      - name: Initiate terraform
        working-directory: ./core
        run: terraform init

      - name: Generate SHA slug
        run: echo "::set-env name=COMMITISH::$(git rev-parse --short HEAD)"

      - name: Apply terraform
        timeout-minutes: 10
        working-directory: ./core
        env:
          TF_VAR_do_subdomain: ${{ format('{0}.{1}', env.COMMITISH, secrets.STAGING_SUBDOMAIN) }}
        run: terraform apply -auto-approve

      - name: Wait for System
        timeout-minutes: 10
        working-directory: ./core
        env:
          TF_VAR_do_subdomain: ${{ format('{0}.{1}', env.COMMITISH, secrets.STAGING_SUBDOMAIN) }}
        run: scripts/online-check.sh

      - name: Test environment
        if: ${{ success() }}
        run: |
          # Running test commands
          # TODO:
          # - instanciate one secret
          # - instanciate smoketest function
          # - invoke smoketest function
          echo "test"

      - name: Teardown environment
        if: ${{ always() }}
        working-directory: ./core
        env:
          TF_VAR_do_subdomain: ${{ format('{0}.{1}', env.COMMITISH, secrets.STAGING_SUBDOMAIN) }}
        run: terraform destroy -auto-approve
